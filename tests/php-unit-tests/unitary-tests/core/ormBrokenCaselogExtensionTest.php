<?php
/*
 * @copyright   Copyright (C) 2010-2023 Combodo SARL
 * @license     http://opensource.org/licenses/AGPL-3.0
 */


namespace Combodo\iTop\Test\UnitTest\Core;

use Combodo\iTop\Test\UnitTest\ItopDataTestCase;
use ormCaseLog;

/**
 * Tests of the ormCaseLog class
 *
 * @covers \ormCaseLog
 *
 * @runTestsInSeparateProcesses
 * @preserveGlobalState disabled
 * @backupGlobals disabled
 */
class ormBrokenCaselogExtensionTest extends ItopDataTestCase
{
	const USE_TRANSACTION = false;
	private $sLogin;
	private $sPassword = "Iuytrez9876543ç_è-(";

	public function setUp() :void{
		parent::setUp(); // TODO: Change the autogenerated stub
		require_once __DIR__ . "/OrmCaseLogExtensionForTest.php";
		require_once APPROOT . "core/ormcaselogservice.inc.php";

		$oAdminProfile = \MetaModel::GetObjectFromOQL("SELECT URP_Profiles WHERE name = :name", array('name' => 'Administrator'), true);

		if (is_object($oAdminProfile)) {
			$this->sLogin = sprintf("admin-%s-%s", date('dmYHis'), uniqid());

			$this->CreateTestOrganization();

			/** @var \Person $oPerson */
			$oPerson = $this->createObject('Person', array(
				'name' => $this->sLogin,
				'first_name' => 'Test',
				'org_id' => $this->getTestOrgId(),
			));

			$this->CreateUser($this->sLogin, $oAdminProfile->GetKey(), $this->sPassword, $oPerson->GetKey());
		}
	}

	public function LogBrokenCaseLogProvider(){
		return [
			'extension configured / should log broken caselog info' => [ true ],
			'extension NOT configured/ should do nothing' => [ false ],
		];
	}

	/**
	 * @dataProvider LogBrokenCaseLogProvider
	 */
	public function testLogBrokenCaseLog_constructor($bExtensionConfigured){
		if ($bExtensionConfigured){
			\MetaModel::GetConfig()->Set('ormcaselog_extension_classes', [ \ormBrokenCaselogExtension::class]);
		}

		$sLog = "aaaaa";
		$aInitialIndex = ['a' => 'b'];

		$sLogPath = APPROOT . 'log/error.log';
		$iLogIndexBefore = strrpos(file_get_contents($sLogPath), 'Broken caselog | ORCMCASELOG');
		$oLog = new ormCaseLog($sLog, $aInitialIndex);
		$iLogIndexAfter = strrpos(file_get_contents($sLogPath), 'Broken caselog | ORCMCASELOG');

		if ($bExtensionConfigured){
			$this->assertNotEquals($iLogIndexBefore, $iLogIndexAfter, 'Log line found and it must be in aother position in the log file');
		} else {
			$this->assertEquals($iLogIndexBefore, $iLogIndexAfter, 'No log line found OR it is found at same position (logged before)');
		}
	}
}
